# Generated by Django 4.0.4 on 2022-04-14 19:55

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cleaners',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forfeit', models.PositiveIntegerField(blank=True, null=True, verbose_name='Штраф клинера')),
                ('salary', models.PositiveIntegerField(blank=True, null=True, verbose_name='Зарплата')),
                ('staff', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='cleaner', to=settings.AUTH_USER_MODEL, verbose_name='Клинер')),
            ],
        ),
        migrations.CreateModel(
            name='CleaningSort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Тип уборки')),
            ],
            options={
                'verbose_name': 'Тип уборки',
                'verbose_name_plural': 'Типы уборок',
                'db_table': 'cleaning_sort',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=75, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=75, verbose_name='Фамилия')),
                ('phone', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20, verbose_name='Номер телефона'), size=None)),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
                'db_table': 'client',
            },
        ),
        migrations.CreateModel(
            name='ComplexityFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название коэффициента')),
                ('description', models.TextField(blank=True, max_length=400, null=True, verbose_name='Описание')),
                ('factor', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Значение коэффициента')),
            ],
            options={
                'verbose_name': 'Коэффициент сложности',
                'verbose_name_plural': 'Коэффициенты сложности',
                'db_table': 'complexity_factor',
            },
        ),
        migrations.CreateModel(
            name='ExtraService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, verbose_name='Дополнительная услуга')),
                ('unit', models.CharField(blank=True, max_length=350, null=True, verbose_name='Единица измерения')),
                ('price', models.PositiveIntegerField(verbose_name='Цена')),
                ('cleaning_time', models.IntegerField(blank=True, null=True, verbose_name='Время уборки')),
            ],
            options={
                'verbose_name': 'Дополнительная услуга',
                'verbose_name_plural': 'Дополнительные услуги',
                'db_table': 'extra_services',
            },
        ),
        migrations.CreateModel(
            name='Foreman',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bonus', models.PositiveIntegerField(blank=True, null=True, verbose_name='Бонус бригадира')),
                ('forfeit', models.PositiveIntegerField(blank=True, null=True, verbose_name='Штраф бригадира')),
                ('salary', models.PositiveIntegerField(blank=True, null=True, verbose_name='Зарплата')),
                ('staff', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='foreman', to=settings.AUTH_USER_MODEL, verbose_name='Бригадир')),
            ],
        ),
        migrations.CreateModel(
            name='ForemanOrderUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='foreman_extra', to='crmapp.extraservice', verbose_name='Дополнительная услуга')),
            ],
        ),
        migrations.CreateModel(
            name='ForemanPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='photo_obj', verbose_name='Фото')),
            ],
        ),
        migrations.CreateModel(
            name='ForemanReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expenses', models.PositiveIntegerField(blank=True, null=True, verbose_name='Расходы')),
                ('start_at', models.DateTimeField(verbose_name='Дата и время начала работы')),
                ('end_at', models.DateTimeField(verbose_name='Дата и время окончания работы')),
                ('photo_after', models.ManyToManyField(blank=True, null=True, related_name='foreman_photo_after', to='crmapp.foremanphoto', verbose_name='Фото после окончания работ')),
                ('photo_before', models.ManyToManyField(blank=True, null=True, related_name='foreman_photo_before', to='crmapp.foremanphoto', verbose_name='Фото до начала работ')),
            ],
        ),
        migrations.CreateModel(
            name='PropertySort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Тип объекта')),
            ],
            options={
                'verbose_name': 'Тип объекта',
                'verbose_name_plural': 'Типы объектов',
                'db_table': 'property_sort',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit', models.CharField(choices=[('Square meter', 'м²'), ('Piece', 'шт.')], default='Square meter', max_length=125, verbose_name='Единица измерения')),
                ('price', models.PositiveIntegerField(verbose_name='Цена')),
                ('cleaning_sort', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crmapp.cleaningsort', verbose_name='Тип уборки')),
                ('property_sort', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='crmapp.propertysort', verbose_name='Тип объекта')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
                'db_table': 'service',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_finished', models.BooleanField(default=False, verbose_name='Завершённая работа')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания заказа')),
                ('work_start', models.DateTimeField(verbose_name='Дата и время выполнения уборки')),
                ('work_time', models.TimeField(verbose_name='Время выполнения работ')),
                ('work_time_end', models.TimeField(verbose_name='Фактическое время выполнения работ')),
                ('address', models.CharField(max_length=256, verbose_name='Адрес')),
                ('review', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Отзыв')),
                ('payment_type', models.CharField(choices=[(0, 'Наличная оплата'), (1, 'Безналичная оплата')], default=1, max_length=100, verbose_name='Вид оплаты')),
                ('total_cost', models.PositiveIntegerField(blank=True, null=True, verbose_name='Общая сумма заказа')),
                ('cleaners', models.ManyToManyField(related_name='cleaners_order', to='crmapp.cleaners', verbose_name='Клинеры')),
                ('client_info', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_client', to='crmapp.client', verbose_name='Информация клиента')),
                ('extra_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='order_extra', to='crmapp.extraservice', verbose_name='Дополнительная услуга')),
                ('foreman', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='foreman_order', to='crmapp.foreman', verbose_name='Бригадир заказа')),
                ('foreman_order_update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='crmapp.foremanorderupdate', verbose_name='Редактирование услуг для бригадира')),
                ('foremen_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='crmapp.foremanreport', verbose_name='Отчёт бригадира')),
                ('manager', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='manager_order', to=settings.AUTH_USER_MODEL, verbose_name='Менеджер')),
                ('service', models.ManyToManyField(blank=True, null=True, related_name='order_service', to='crmapp.service', verbose_name='Услуга')),
            ],
        ),
        migrations.AddField(
            model_name='foremanorderupdate',
            name='service',
            field=models.ManyToManyField(blank=True, null=True, related_name='foreman_service', to='crmapp.service', verbose_name='Услуга'),
        ),
    ]
